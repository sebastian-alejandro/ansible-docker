# ===================================
# CI/CD Pipeline - Ansible Docker Environment
# Sprint 1: Complete Test Automation
# ===================================

name: üê≥ Complete Test Suite

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - build
        - functional
        - ssh
        - integration
        - security

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sebastian-alejandro/ansible-docker
  CONTAINER_NAME: centos9-ansible

jobs:
  # ===================================
  # 1. BUILD TESTS - Construcci√≥n y Validaci√≥n
  # ===================================
  build-tests:
    name: üî® Build Tests
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìù Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.CONTAINER_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=test

      - name: üèóÔ∏è Build Container Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./centos9
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/centos9-image.tar

      - name: üì¶ Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: centos9-image
          path: /tmp/centos9-image.tar
          retention-days: 1

      - name: üîç Validate Container Metadata
        run: |
          echo "üè∑Ô∏è Validating container labels and metadata..."
          docker load -i /tmp/centos9-image.tar
          
          # Check required labels
          MAINTAINER=$(docker inspect --format='{{index .Config.Labels "maintainer"}}' ${{ env.CONTAINER_NAME }}:test)
          VERSION=$(docker inspect --format='{{index .Config.Labels "version"}}' ${{ env.CONTAINER_NAME }}:test)
          
          echo "Maintainer: $MAINTAINER"
          echo "Version: $VERSION"
          
          if [ "$MAINTAINER" != "DevOps Team" ]; then
            echo "‚ùå Invalid maintainer label"
            exit 1
          fi
          
          if [ "$VERSION" != "1.0" ]; then
            echo "‚ùå Invalid version label"
            exit 1
          fi
          
          echo "‚úÖ Container metadata validation passed"

      - name: üåç Validate Environment Variables
        run: |
          echo "üîç Validating environment variables..."
          docker load -i /tmp/centos9-image.tar
          
          # Check required environment variables
          ENV_VARS=$(docker inspect --format='{{.Config.Env}}' ${{ env.CONTAINER_NAME }}:test)
          
          if [[ ! "$ENV_VARS" =~ "LANG=en_US.UTF-8" ]]; then
            echo "‚ùå LANG environment variable not set correctly"
            exit 1
          fi
          
          if [[ ! "$ENV_VARS" =~ "ANSIBLE_USER=ansible" ]]; then
            echo "‚ùå ANSIBLE_USER environment variable not set correctly"
            exit 1
          fi
          
          echo "‚úÖ Environment variables validation passed"

      - name: üìä Image Size Analysis
        run: |
          echo "üìè Analyzing image size..."
          docker load -i /tmp/centos9-image.tar
          docker images ${{ env.CONTAINER_NAME }}:test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
          
          # Get image size in MB
          SIZE_MB=$(docker images ${{ env.CONTAINER_NAME }}:test --format "{{.Size}}" | sed 's/MB//')
          echo "Image size: ${SIZE_MB}MB"
          
          # Warning if image is too large (>2GB)
          if [ "${SIZE_MB%.*}" -gt 2000 ]; then
            echo "‚ö†Ô∏è Warning: Image size is larger than 2GB"
          else
            echo "‚úÖ Image size is acceptable"
          fi

  # ===================================
  # 2. FUNCTIONAL TESTS - Funcionalidad B√°sica
  # ===================================
  functional-tests:
    name: ‚ö° Functional Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: centos9-image
          path: /tmp

      - name: üîÑ Load Docker image
        run: docker load -i /tmp/centos9-image.tar

      - name: üöÄ Start Container for Testing
        run: |
          echo "üöÄ Starting container for functional tests..."
          docker run -d --name test-functional \
            -p 2299:22 \
            -e CI=true \
            -e GITHUB_ACTIONS=true \
            --privileged \
            --tmpfs /tmp \
            --tmpfs /run \
            --tmpfs /run/lock \
            -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
            ${{ env.CONTAINER_NAME }}:test
          
          # Wait for container to be ready
          echo "‚è≥ Waiting for container to start..."
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep -q test-functional; then
            echo "‚ùå Container failed to start"
            echo "üìã Container logs:"
            docker logs test-functional
            echo "üìã Container status:"
            docker ps -a | grep test-functional || echo "Container not found"
            exit 1
          fi
          
          echo "‚úÖ Container started successfully"
          
          # Wait for entrypoint to complete initialization
          echo "‚è≥ Waiting for container initialization..."
          
          # Check if we're in CI fallback mode (no systemd)
          if docker exec test-functional test -f /run/systemd/system 2>/dev/null; then
            echo "üîß Detected systemd mode"
            timeout 120 bash -c 'while ! docker exec test-functional systemctl is-system-running 2>/dev/null | grep -E "(running|degraded)" > /dev/null; do 
              echo "System status: $(docker exec test-functional systemctl is-system-running 2>/dev/null || echo starting)"
              sleep 5
            done' || {
              echo "‚ùå Container initialization timeout"
              echo "üìã Current container logs:"
              docker logs test-functional
              exit 1
            }
          else
            echo "üîß Detected fallback mode (no systemd)"
            # Wait for SSH daemon to be running in fallback mode
            timeout 120 bash -c 'while ! docker exec test-functional pgrep sshd > /dev/null 2>&1; do 
              echo "SSH process status: $(docker exec test-functional pgrep sshd > /dev/null 2>&1 && echo running || echo starting)"
              sleep 5
            done' || {
              echo "‚ùå Container initialization timeout in fallback mode"
              echo "üìã Current container logs:"
              docker logs test-functional
              exit 1
            }
          fi
          
          # Wait for SSH service specifically (compatible with both modes)
          echo "‚è≥ Waiting for SSH service..."
          timeout 60 bash -c 'while ! docker exec test-functional netstat -tlnp 2>/dev/null | grep -q ":22 "; do 
            echo "SSH port status: $(docker exec test-functional netstat -tlnp 2>/dev/null | grep ":22 " > /dev/null && echo listening || echo not_listening)"
            sleep 3
          done' || {
            echo "‚ùå SSH service failed to start"
            echo "üìã SSH service status:"
            docker exec test-functional pgrep sshd || echo "SSH daemon not running"
            docker exec test-functional netstat -tlnp 2>/dev/null | grep ":22 " || echo "SSH port not listening"
            exit 1
          }
          
          echo "‚úÖ Container is ready for testing"

      - name: üîç Test Container Status
        run: |
          echo "üìä Checking container status..."
          STATUS=$(docker ps --filter "name=test-functional" --format "{{.Status}}")
          if [[ "$STATUS" =~ "Up" ]]; then
            echo "‚úÖ Container is running"
          else
            echo "‚ùå Container is not running properly"
            docker logs test-functional
            exit 1
          fi

      - name: üîê Test SSH Service
        run: |
          echo "üîê Testing SSH service..."
          
          # Check if we're in fallback mode or systemd mode
          if docker exec test-functional test -f /run/systemd/system 2>/dev/null; then
            echo "üîß Testing SSH in systemd mode"
            SSH_STATUS=$(docker exec test-functional systemctl is-active sshd)
            if [ "$SSH_STATUS" == "active" ]; then
              echo "‚úÖ SSH service is active"
            else
              echo "‚ùå SSH service is not active: $SSH_STATUS"
              exit 1
            fi
          else
            echo "üîß Testing SSH in fallback mode"
            # Check if SSH daemon is running
            if docker exec test-functional pgrep sshd > /dev/null; then
              echo "‚úÖ SSH daemon is running"
            else
              echo "‚ùå SSH daemon is not running"
              exit 1
            fi
          fi
          
          # Test SSH port listening (works in both modes)
          if docker exec test-functional netstat -tlnp | grep -q ":22 "; then
            echo "‚úÖ SSH port 22 is listening"
          else
            echo "‚ùå SSH port 22 is not listening"
            exit 1
          fi

      - name: üë§ Test User Configuration
        run: |
          echo "üë§ Testing user configuration..."
          
          # Test ansible user exists
          if docker exec test-functional id ansible > /dev/null 2>&1; then
            echo "‚úÖ User ansible exists"
          else
            echo "‚ùå User ansible does not exist"
            exit 1
          fi
          
          # Test ansible user is in wheel group
          if docker exec test-functional groups ansible | grep -q wheel; then
            echo "‚úÖ User ansible is in wheel group"
          else
            echo "‚ùå User ansible is not in wheel group"
            exit 1
          fi
          
          # Test sudo without password
          if docker exec test-functional sudo -u ansible sudo -n whoami | grep -q root; then
            echo "‚úÖ Sudo without password works"
          else
            echo "‚ùå Sudo without password does not work"
            exit 1
          fi

      - name: üêç Test Python and Tools
        run: |
          echo "üêç Testing Python and essential tools..."
          
          # Test Python3
          PYTHON_VERSION=$(docker exec test-functional python3 --version)
          if [[ "$PYTHON_VERSION" =~ "Python 3" ]]; then
            echo "‚úÖ Python3 is available: $PYTHON_VERSION"
          else
            echo "‚ùå Python3 is not available"
            exit 1
          fi
          
          # Test essential tools
          TOOLS=("curl" "wget" "vim" "git" "htop")
          for tool in "${TOOLS[@]}"; do
            if docker exec test-functional which $tool > /dev/null 2>&1; then
              echo "‚úÖ Tool $tool is available"
            else
              echo "‚ùå Tool $tool is not available"
              exit 1
            fi
          done

      - name: üìÅ Test Directory Structure
        run: |
          echo "üìÅ Testing directory structure..."
          
          # Test ansible user home directory
          if docker exec test-functional test -d /home/ansible; then
            echo "‚úÖ Ansible home directory exists"
          else
            echo "‚ùå Ansible home directory does not exist"
            exit 1
          fi
          
          # Test .ssh directory
          if docker exec test-functional test -d /home/ansible/.ssh; then
            echo "‚úÖ SSH directory exists"
            
            # Check permissions
            PERMS=$(docker exec test-functional stat -c "%a" /home/ansible/.ssh)
            if [ "$PERMS" == "700" ]; then
              echo "‚úÖ SSH directory has correct permissions (700)"
            else
              echo "‚ùå SSH directory has incorrect permissions: $PERMS"
              exit 1
            fi
          else
            echo "‚ùå SSH directory does not exist"
            exit 1
          fi

      - name: üßπ Cleanup Functional Tests
        if: always()
        run: |
          docker stop test-functional || true
          docker rm test-functional || true

  # ===================================
  # 3. SSH CONNECTIVITY TESTS - Conectividad SSH
  # ===================================
  ssh-tests:
    name: üîê SSH Connectivity Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: centos9-image
          path: /tmp

      - name: üîÑ Load Docker image
        run: docker load -i /tmp/centos9-image.tar

      - name: üîß Install SSH Client Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass expect

      - name: üöÄ Start Container for SSH Testing
        run: |
          echo "üöÄ Starting container for SSH tests..."
          docker run -d --name test-ssh \
            -p 2298:22 \
            -e CI=true \
            -e GITHUB_ACTIONS=true \
            --privileged \
            --tmpfs /tmp \
            --tmpfs /run \
            --tmpfs /run/lock \
            -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
            ${{ env.CONTAINER_NAME }}:test
          
          # Wait for container to be ready
          echo "‚è≥ Waiting for container to start..."
          sleep 30
          
          # Check if we're in CI fallback mode (no systemd)
          if docker exec test-ssh test -f /run/systemd/system 2>/dev/null; then
            echo "üîß Detected systemd mode"
            # Wait for systemd to be ready
            echo "‚è≥ Waiting for systemd..."
            timeout 60 bash -c 'until docker exec test-ssh systemctl is-system-running --wait 2>/dev/null; do sleep 5; done' || true
            
            # Wait for SSH service to be ready
            echo "‚è≥ Waiting for SSH service..."
            timeout 120 bash -c 'until docker exec test-ssh systemctl is-active sshd 2>/dev/null | grep -q active; do sleep 5; done'
          else
            echo "üîß Detected fallback mode (no systemd)"
            # Wait for SSH daemon to be running in fallback mode
            echo "‚è≥ Waiting for SSH daemon..."
            timeout 120 bash -c 'while ! docker exec test-ssh pgrep sshd > /dev/null 2>&1; do 
              echo "SSH process status: $(docker exec test-ssh pgrep sshd > /dev/null 2>&1 && echo running || echo starting)"
              sleep 5
            done'
          fi
          
          sleep 10

      - name: üîê Test SSH Configuration
        run: |
          echo "üîç Testing SSH configuration..."
          
          # Test SSH daemon configuration
          echo "Checking SSH daemon configuration..."
          docker exec test-ssh sshd -T > sshd_config.txt
          
          # Check password authentication
          if grep -q "passwordauthentication yes" sshd_config.txt; then
            echo "‚úÖ Password authentication enabled"
          else
            echo "‚ùå Password authentication not enabled"
            exit 1
          fi
          
          # Check public key authentication
          if grep -q "pubkeyauthentication yes" sshd_config.txt; then
            echo "‚úÖ Public key authentication enabled"
          else
            echo "‚ùå Public key authentication not enabled"
            exit 1
          fi

      - name: üîë Test SSH Host Keys
        run: |
          echo "üîë Testing SSH host keys..."
          HOST_KEYS=("ssh_host_rsa_key" "ssh_host_ecdsa_key" "ssh_host_ed25519_key")
          
          for key in "${HOST_KEYS[@]}"; do
            if docker exec test-ssh test -f "/etc/ssh/$key"; then
              echo "‚úÖ Host key exists: $key"
            else
              echo "‚ùå Host key missing: $key"
              exit 1
            fi
          done

      - name: üîê Test SSH Password Authentication
        run: |
          echo "üîê Testing SSH password authentication..."
          
          # Create expect script for SSH connection
          cat > ssh_test.exp << 'EOF'
          #!/usr/bin/expect -f
          set timeout 20
          spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ansible@localhost -p 2298 "echo SSH_SUCCESS"
          expect "password:"
          send "ansible123\r"
          expect "SSH_SUCCESS"
          exit 0
          EOF
          
          chmod +x ssh_test.exp
          
          if ./ssh_test.exp; then
            echo "‚úÖ SSH password authentication successful"
          else
            echo "‚ùå SSH password authentication failed"
            # Show container logs for debugging
            docker logs test-ssh
            exit 1
          fi

      - name: üìÅ Test SSH Directory Structure
        run: |
          echo "üìÅ Testing SSH directory structure..."
          
          # Test .ssh directory existence and permissions
          if docker exec test-ssh test -d /home/ansible/.ssh; then
            echo "‚úÖ SSH directory exists"
            
            PERMS=$(docker exec test-ssh stat -c "%a" /home/ansible/.ssh)
            if [ "$PERMS" == "700" ]; then
              echo "‚úÖ SSH directory permissions correct (700)"
            else
              echo "‚ùå SSH directory permissions incorrect: $PERMS"
              exit 1
            fi
          else
            echo "‚ùå SSH directory does not exist"
            exit 1
          fi

      - name: üßπ Cleanup SSH Tests
        if: always()
        run: |
          docker stop test-ssh || true
          docker rm test-ssh || true

  # ===================================
  # 4. SECURITY TESTS - Pruebas de Seguridad
  # ===================================
  security-tests:
    name: üîí Security Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: centos9-image
          path: /tmp

      - name: üîÑ Load Docker image
        run: docker load -i /tmp/centos9-image.tar

      - name: üöÄ Start Container for Security Testing
        run: |
          echo "üöÄ Starting container for security tests..."
          docker run -d --name test-security \
            -e CI=true \
            -e GITHUB_ACTIONS=true \
            --privileged \
            --tmpfs /tmp \
            --tmpfs /run \
            --tmpfs /run/lock \
            -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
            ${{ env.CONTAINER_NAME }}:test
          
          # Wait for container to be ready
          echo "‚è≥ Waiting for container to start..."
          sleep 30
          
          # Check if we're in CI fallback mode (no systemd)
          if docker exec test-security test -f /run/systemd/system 2>/dev/null; then
            echo "üîß Detected systemd mode"
            # Wait for systemd to be ready
            echo "‚è≥ Waiting for systemd..."
            timeout 60 bash -c 'until docker exec test-security systemctl is-system-running --wait 2>/dev/null; do sleep 5; done' || true
          else
            echo "üîß Detected fallback mode (no systemd)"
            # Wait for SSH daemon to be running in fallback mode
            timeout 60 bash -c 'while ! docker exec test-security pgrep sshd > /dev/null 2>&1; do sleep 5; done' || true
          fi

      - name: üë§ Test User Security Configuration
        run: |
          echo "üë§ Testing user security configuration..."
          
          # Test default user (should not be root for production, but OK for SSH container)
          DEFAULT_USER=$(docker exec test-security whoami || echo "container-not-ready")
          echo "Default user: $DEFAULT_USER"
          
          # Test ansible user configuration
          if docker exec test-security id ansible > /dev/null 2>&1; then
            echo "‚úÖ User ansible exists"
            
            # Check if ansible user is in wheel group
            if docker exec test-security groups ansible | grep -q wheel; then
              echo "‚úÖ User ansible is in wheel group"
            else
              echo "‚ùå User ansible is not in wheel group"
              exit 1
            fi
          else
            echo "‚ùå User ansible does not exist"
            exit 1
          fi

      - name: üîë Test Sudo Configuration Security
        run: |
          echo "üîë Testing sudo configuration..."
          
          # Check sudo configuration for ansible user
          if docker exec test-security test -f /etc/sudoers.d/ansible; then
            echo "‚úÖ Sudo configuration file exists"
            
            SUDO_CONFIG=$(docker exec test-security cat /etc/sudoers.d/ansible)
            if [[ "$SUDO_CONFIG" =~ "NOPASSWD:ALL" ]]; then
              echo "‚ö†Ô∏è User ansible has passwordless sudo (required for Ansible automation)"
            else
              echo "‚ùå Sudo configuration incorrect"
              exit 1
            fi
          else
            echo "‚ùå Sudo configuration file does not exist"
            exit 1
          fi

      - name: üìÅ Test File Permissions Security
        run: |
          echo "üìÅ Testing critical file permissions..."
          
          # Test critical system files
          CRITICAL_FILES=(
            "/etc/shadow:640"
            "/etc/passwd:644"
            "/etc/ssh/sshd_config:644"
            "/home/ansible/.ssh:700"
          )
          
          for file_perm in "${CRITICAL_FILES[@]}"; do
            IFS=':' read -r file expected_perm <<< "$file_perm"
            
            if docker exec test-security test -e "$file"; then
              actual_perm=$(docker exec test-security stat -c "%a" "$file")
              if [ "$actual_perm" == "$expected_perm" ]; then
                echo "‚úÖ Correct permissions for $file: $actual_perm"
              else
                echo "‚ö†Ô∏è Permissions for $file: expected=$expected_perm, actual=$actual_perm"
              fi
            else
              echo "‚ùå File does not exist: $file"
              exit 1
            fi
          done

      - name: üö´ Test Unnecessary Services
        run: |
          echo "üö´ Testing for unnecessary services..."
          
          # List of services that should not be running in a minimal container
          UNNECESSARY_SERVICES=("telnet" "ftp" "rsh" "rlogin" "apache2" "nginx")
          
          # Check if we're in systemd mode or fallback mode
          if docker exec test-security test -f /run/systemd/system 2>/dev/null; then
            echo "üîß Testing services in systemd mode"
            for service in "${UNNECESSARY_SERVICES[@]}"; do
              if docker exec test-security systemctl is-enabled "$service" 2>/dev/null | grep -q enabled; then
                echo "‚ö†Ô∏è Unnecessary service enabled: $service"
              else
                echo "‚úÖ Service $service is disabled or not installed"
              fi
            done
          else
            echo "üîß Testing services in fallback mode"
            for service in "${UNNECESSARY_SERVICES[@]}"; do
              if docker exec test-security pgrep "$service" > /dev/null 2>&1; then
                echo "‚ö†Ô∏è Unnecessary service running: $service"
              else
                echo "‚úÖ Service $service is not running"
              fi
            done
          fi

      - name: üîç Test Container Security Context
        run: |
          echo "üîç Testing container security context..."
          
          # Check if container is running in privileged mode
          PRIVILEGED=$(docker inspect test-security --format='{{.HostConfig.Privileged}}')
          if [ "$PRIVILEGED" == "false" ]; then
            echo "‚úÖ Container is not running in privileged mode"
          else
            echo "‚ö†Ô∏è Container is running in privileged mode (may be required for systemd)"
          fi
          
          # Check capabilities
          echo "Container capabilities:"
          docker inspect test-security --format='{{.HostConfig.CapAdd}}' || echo "No additional capabilities"

      - name: üîê Test SSH Security Configuration
        run: |
          echo "üîê Testing SSH security configuration..."
          
          # Check SSH configuration for security
          docker exec test-security sshd -T > ssh_security_config.txt
          
          # Check if root login is permitted (acceptable for demo environment)
          if grep -q "permitrootlogin yes" ssh_security_config.txt; then
            echo "‚ö†Ô∏è Root login permitted (acceptable for demo environment)"
          fi
          
          # Check if empty passwords are disabled
          if grep -q "permitemptypasswords no" ssh_security_config.txt; then
            echo "‚úÖ Empty passwords disabled"
          else
            echo "‚ö†Ô∏è Empty passwords configuration not found"
          fi

      - name: üßπ Cleanup Security Tests
        if: always()
        run: |
          docker stop test-security || true
          docker rm test-security || true

  # ===================================
  # 5. INTEGRATION TESTS - Pruebas Multi-Container
  # ===================================
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [build-tests, functional-tests]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: centos9-image
          path: /tmp

      - name: üîÑ Load Docker image
        run: docker load -i /tmp/centos9-image.tar

      - name: üèóÔ∏è Tag image for docker-compose
        run: |
          # Tag the image to match docker-compose expectations
          docker tag ${{ env.CONTAINER_NAME }}:test centos9_centos9-node1:latest
          docker tag ${{ env.CONTAINER_NAME }}:test centos9_centos9-node2:latest

      - name: üöÄ Start Multi-Container Environment
        run: |
          echo "üöÄ Starting multi-container environment..."
          docker compose up -d
          
          # Wait for containers to be ready
          echo "‚è≥ Waiting for containers to be ready..."
          sleep 30

      - name: üìä Test Multi-Container Deployment
        run: |
          echo "üìä Testing multi-container deployment..."
          
          # Check if all services are running
          SERVICES=$(docker compose ps --services)
          RUNNING_SERVICES=$(docker compose ps --filter "status=running" --services)
          
          echo "Expected services: $SERVICES"
          echo "Running services: $RUNNING_SERVICES"
          
          SERVICE_COUNT=$(echo "$SERVICES" | wc -l)
          RUNNING_COUNT=$(echo "$RUNNING_SERVICES" | wc -l)
          
          if [ "$SERVICE_COUNT" -eq "$RUNNING_COUNT" ]; then
            echo "‚úÖ All services are running"
          else
            echo "‚ùå Some services are not running"
            docker compose ps
            exit 1
          fi

      - name: üåê Test Network Connectivity Between Containers
        run: |
          echo "üåê Testing network connectivity..."
          
          # Test ping between containers
          if docker compose exec -T centos9-node-1 ping -c 2 centos9-node-2; then
            echo "‚úÖ Node1 can ping Node2"
          else
            echo "‚ùå Node1 cannot ping Node2"
            exit 1
          fi
          
          if docker compose exec -T centos9-node-2 ping -c 2 centos9-node-1; then
            echo "‚úÖ Node2 can ping Node1"
          else
            echo "‚ùå Node2 cannot ping Node1"
            exit 1
          fi

      - name: üîå Test Port Mapping
        run: |
          echo "üîå Testing port mapping..."
          
          # Install netcat for port testing
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd
          
          # Test port accessibility
          PORTS=(2201 2202)
          for port in "${PORTS[@]}"; do
            if timeout 5 nc -z localhost $port; then
              echo "‚úÖ Port $port is accessible"
            else
              echo "‚ùå Port $port is not accessible"
              exit 1
            fi
          done

      - name: ‚ù§Ô∏è Test Container Health Status
        run: |
          echo "‚ù§Ô∏è Testing container health status..."
          
          CONTAINERS=("centos9-node-1" "centos9-node-2")
          for container in "${CONTAINERS[@]}"; do
            # Wait a bit more for health checks to complete
            sleep 10
            
            HEALTH=$(docker inspect --format='{{.State.Health.Status}}' $container 2>/dev/null || echo "no-healthcheck")
            echo "Health status for $container: $HEALTH"
            
            if [ "$HEALTH" == "healthy" ]; then
              echo "‚úÖ $container is healthy"
            elif [ "$HEALTH" == "starting" ]; then
              echo "‚è≥ $container is still starting, waiting..."
              # Wait a bit more and check again
              sleep 15
              HEALTH=$(docker inspect --format='{{.State.Health.Status}}' $container 2>/dev/null || echo "no-healthcheck")
              if [ "$HEALTH" == "healthy" ]; then
                echo "‚úÖ $container is now healthy"
              else
                echo "‚ö†Ô∏è $container health status: $HEALTH"
              fi
            else
              echo "‚ö†Ô∏è $container health status: $HEALTH"
            fi
          done

      - name: üíæ Test Volume Persistence
        run: |
          echo "üíæ Testing volume persistence..."
          
          # Create test file in node1
          docker compose exec -T centos9-node-1 bash -c "mkdir -p /home/ansible/test && echo 'persistence-test' > /home/ansible/test/persistence.txt"
          
          # Restart the container
          docker compose restart centos9-node-1
          sleep 15
          
          # Check if file persists
          if docker compose exec -T centos9-node-1 cat /home/ansible/test/persistence.txt | grep -q "persistence-test"; then
            echo "‚úÖ Volume persistence working"
          else
            echo "‚ùå Volume persistence failed"
            exit 1
          fi

      - name: üîç Test Docker Network Configuration
        run: |
          echo "üîç Testing Docker network configuration..."
          
          # Check if ansible-network exists
          if docker network ls | grep -q ansible-network; then
            echo "‚úÖ Ansible network exists"
            
            # Check network configuration
            docker network inspect ansible-network
          else
            echo "‚ùå Ansible network does not exist"
            exit 1
          fi

      - name: üßπ Cleanup Integration Tests
        if: always()
        run: |
          echo "üßπ Cleaning up integration tests..."
          docker compose down -v --remove-orphans || true
          docker system prune -f || true

  # ===================================
  # LINT Y VALIDACI√ìN - Prerequisitos
  # ===================================
  lint-validation:
    name: üîç Lint & Validation
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: centos9/Dockerfile
          config: .hadolint.yaml
          failure-threshold: error

      - name: üîß Validate Docker Compose
        run: |
          echo "üîß Validating Docker Compose configuration..."
          docker compose config

      - name: üìù Validate Documentation
        run: |
          echo "üìù Validating documentation files..."
          
          # Check if required documentation exists
          REQUIRED_DOCS=("README.md" "CHANGELOG.md" "LICENSE" "CONTRIBUTING.md")
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ Documentation file exists: $doc"
            else
              echo "‚ùå Missing documentation file: $doc"
              exit 1
            fi
          done

  # ===================================
  # TEST SUMMARY - Resumen de Resultados
  # ===================================
  test-summary:
    name: üìä Test Summary
    runs-on: ubuntu-latest
    needs: [lint-validation, build-tests, functional-tests, ssh-tests, security-tests, integration-tests]
    if: always()
    steps:
      - name: üìä Generate Test Summary
        run: |
          echo "# üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check status of each test job
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Lint & Validation | ${{ needs.lint-validation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üî® Build Tests | ${{ needs.build-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Functional Tests | ${{ needs.functional-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîê SSH Tests | ${{ needs.ssh-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security Tests | ${{ needs.security-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîó Integration Tests | ${{ needs.integration-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.lint-validation.result }}" == "success" ] && \
             [ "${{ needs.build-tests.result }}" == "success" ] && \
             [ "${{ needs.functional-tests.result }}" == "success" ] && \
             [ "${{ needs.ssh-tests.result }}" == "success" ] && \
             [ "${{ needs.security-tests.result }}" == "success" ] && \
             [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "## üéâ Overall Result: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All tests passed successfully! The Sprint 1 implementation is ready." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Overall Result: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Please review the failing tests and fix the issues." >> $GITHUB_STEP_SUMMARY
          fi

  # ===================================
  # RELEASE - Solo en tags
  # ===================================
  release:
    name: üöÄ Release
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: startsWith(github.ref, 'refs/tags/v') && needs.test-summary.result == 'success'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: centos9-image
          path: /tmp

      - name: üîÑ Load Docker image
        run: docker load -i /tmp/centos9-image.tar

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Extract metadata for release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./centos9
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üìã Generate Release Notes
        id: release_notes
        run: |
          echo "üöÄ **Ansible Docker Environment - Release ${{ github.ref_name }}**" > release_notes.md
          echo "" >> release_notes.md
          echo "## üéØ Sprint 1 Features" >> release_notes.md
          echo "- ‚úÖ CentOS 9 Stream optimized containers" >> release_notes.md
          echo "- ‚úÖ SSH server with ansible user configuration" >> release_notes.md
          echo "- ‚úÖ Native Docker/Docker Compose commands (v1.2.0+)" >> release_notes.md
          echo "- ‚úÖ Cross-platform support (Windows, Linux, macOS)" >> release_notes.md
          echo "- ‚úÖ Docker Compose orchestration" >> release_notes.md
          echo "- ‚úÖ Complete test automation with 5 test types" >> release_notes.md
          echo "" >> release_notes.md
          echo "## üß™ Test Results" >> release_notes.md
          echo "All automated tests passed:" >> release_notes.md
          echo "- üî® Build Tests: ‚úÖ Passed" >> release_notes.md
          echo "- ‚ö° Functional Tests: ‚úÖ Passed" >> release_notes.md
          echo "- üîê SSH Connectivity Tests: ‚úÖ Passed" >> release_notes.md
          echo "- üîí Security Tests: ‚úÖ Passed" >> release_notes.md
          echo "- üîó Integration Tests: ‚úÖ Passed" >> release_notes.md
          echo "" >> release_notes.md
          echo "## üê≥ Docker Images" >> release_notes.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> release_notes.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## üöÄ Quick Start" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "git clone https://github.com/sebastian-alejandro/ansible-docker.git" >> release_notes.md
          echo "cd ansible-docker" >> release_notes.md
          echo "docker compose up -d" >> release_notes.md
          echo "ssh ansible@localhost -p 2201" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## üìö Documentation" >> release_notes.md
          echo "- [README.md](README.md)" >> release_notes.md
          echo "- [Sprint 1 Documentation](docs/sprint1.md)" >> release_notes.md
          echo "- [Native Docker Commands Guide](docs/comandos-docker-nativos.md)" >> release_notes.md
          echo "- [Contributing Guidelines](CONTRIBUTING.md)" >> release_notes.md

      - name: üéâ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Sprint 1 Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false
