name: Phase 1 - Ansible Control Node Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ansible-control/**'
      - 'docker-compose.yml'
      - '.github/workflows/phase1-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ansible-control/**'
      - 'docker-compose.yml'
      - '.github/workflows/phase1-tests.yml'
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Validaci√≥n de archivos y estructura
  validate-structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Validate Directory Structure
      run: |
        echo "üîç Validating Phase 1 directory structure..."
        
        # Verificar estructura principal
        test -d "ansible-control" || { echo "‚ùå ansible-control directory missing"; exit 1; }
        test -f "ansible-control/Dockerfile" || { echo "‚ùå Dockerfile missing"; exit 1; }
        test -f "docker-compose.yml" || { echo "‚ùå docker-compose.yml missing"; exit 1; }
        
        # Verificar estructura ansible-control
        test -d "ansible-control/config" || { echo "‚ùå config directory missing"; exit 1; }
        test -d "ansible-control/scripts" || { echo "‚ùå scripts directory missing"; exit 1; }
        test -d "ansible-control/playbooks" || { echo "‚ùå playbooks directory missing"; exit 1; }
        
        # Verificar archivos de configuraci√≥n
        test -f "ansible-control/config/ansible.cfg" || { echo "‚ùå ansible.cfg missing"; exit 1; }
        
        # Verificar scripts
        test -f "ansible-control/scripts/init-control-node.sh" || { echo "‚ùå init-control-node.sh missing"; exit 1; }
        test -f "ansible-control/scripts/generate-ssh-keys.sh" || { echo "‚ùå generate-ssh-keys.sh missing"; exit 1; }
        test -f "ansible-control/scripts/generate-inventory.sh" || { echo "‚ùå generate-inventory.sh missing"; exit 1; }
        test -f "ansible-control/scripts/distribute-ssh-keys.sh" || { echo "‚ùå distribute-ssh-keys.sh missing"; exit 1; }
        test -f "ansible-control/scripts/health-check-control.sh" || { echo "‚ùå health-check-control.sh missing"; exit 1; }
        
        # Verificar playbooks
        test -f "ansible-control/playbooks/ping.yml" || { echo "‚ùå ping.yml missing"; exit 1; }
        test -f "ansible-control/playbooks/setup-base.yml" || { echo "‚ùå setup-base.yml missing"; exit 1; }
        test -f "ansible-control/playbooks/setup-webservers.yml" || { echo "‚ùå setup-webservers.yml missing"; exit 1; }
        
        echo "‚úÖ All Phase 1 files and directories present"
    
    - name: Validate Script Permissions
      run: |
        echo "üîç Validating script permissions..."
        
        # Verificar que los scripts tengan permisos de ejecuci√≥n
        for script in ansible-control/scripts/*.sh; do
          if [ -f "$script" ]; then
            if [ -x "$script" ]; then
              echo "‚úÖ $script has execute permissions"
            else
              echo "‚ùå $script missing execute permissions"
              exit 1
            fi
          fi
        done
    
    - name: Validate YAML Syntax
      uses: ibiqlik/action-yamllint@v3
      with:
        file_or_dir: |
          docker-compose.yml
          ansible-control/playbooks/
          ansible-control/config/
        config_file: .yamllint

  # Job 2: An√°lisis de seguridad y linting
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Run Hadolint (Dockerfile Linter)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ansible-control/Dockerfile
        failure-threshold: warning
    
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'ansible-control/'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Validate Dockerfile Best Practices
      run: |
        echo "üîç Validating Dockerfile best practices..."
        
        # Verificar que se use USER no-root
        if grep -q "USER \$ANSIBLE_USER" ansible-control/Dockerfile; then
          echo "‚úÖ Non-root user configured"
        else
          echo "‚ùå Non-root user not properly configured"
          exit 1
        fi
        
        # Verificar HEALTHCHECK
        if grep -q "HEALTHCHECK" ansible-control/Dockerfile; then
          echo "‚úÖ Health check configured"
        else
          echo "‚ùå Health check missing"
          exit 1
        fi
        
        # Verificar labels
        if grep -q "LABEL maintainer" ansible-control/Dockerfile; then
          echo "‚úÖ Maintainer label present"
        else
          echo "‚ùå Maintainer label missing"
          exit 1
        fi

  # Job 3: Build y test del container
  build-and-test:
    name: Build and Test Container
    runs-on: ubuntu-latest
    needs: [validate-structure, security-analysis]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Ansible Control Node
      run: |
        echo "üèóÔ∏è Building Ansible Control Node container..."
        docker compose build ansible-control
        
        echo "‚úÖ Container built successfully"
    
    - name: Test Container Start
      run: |
        echo "üöÄ Testing container startup..."
        
        # Iniciar el contenedor en modo detached
        docker compose up -d ansible-control
        
        # Esperar que el contenedor est√© listo
        sleep 30
        
        # Verificar que el contenedor est√° corriendo
        if docker compose ps ansible-control | grep -q "Up"; then
          echo "‚úÖ Container started successfully"
        else
          echo "‚ùå Container failed to start"
          docker compose logs ansible-control
          exit 1
        fi
    
    - name: Test Ansible Installation
      run: |
        echo "üîç Testing Ansible installation..."
        
        # Verificar versi√≥n de Ansible
        ANSIBLE_VERSION=$(docker compose exec -T ansible-control ansible --version)
        echo "Ansible version: $ANSIBLE_VERSION"
        
        # Verificar que ansible-core est√° instalado
        if echo "$ANSIBLE_VERSION" | grep -q "ansible"; then
          echo "‚úÖ Ansible is properly installed"
        else
          echo "‚ùå Ansible installation failed"
          exit 1
        fi
    
    - name: Test Python and Dependencies
      run: |
        echo "üîç Testing Python installation..."
        
        # Verificar Python 3
        PYTHON_VERSION=$(docker compose exec -T ansible-control python3 --version)
        echo "Python version: $PYTHON_VERSION"
        
        # Verificar pip
        PIP_VERSION=$(docker compose exec -T ansible-control pip3 --version)
        echo "Pip version: $PIP_VERSION"
        
        echo "‚úÖ Python and pip are properly installed"
    
    - name: Test User Configuration
      run: |
        echo "üîç Testing user configuration..."
        
        # Verificar usuario ansible
        USER_INFO=$(docker compose exec -T ansible-control id ansible)
        echo "User info: $USER_INFO"
        
        # Verificar directorio home
        if docker compose exec -T ansible-control test -d /home/ansible; then
          echo "‚úÖ Home directory exists"
        else
          echo "‚ùå Home directory missing"
          exit 1
        fi
        
        # Verificar permisos sudo
        if docker compose exec -T ansible-control sudo -u ansible sudo -n true; then
          echo "‚úÖ Sudo permissions configured"
        else
          echo "‚ùå Sudo permissions not configured"
          exit 1
        fi
    
    - name: Test Ansible Collections
      run: |
        echo "üîç Testing Ansible collections..."
        
        # Verificar colecciones instaladas
        COLLECTIONS=$(docker compose exec -T ansible-control ansible-galaxy collection list)
        echo "Installed collections:"
        echo "$COLLECTIONS"
        
        # Verificar community.general
        if echo "$COLLECTIONS" | grep -q "community.general"; then
          echo "‚úÖ community.general collection installed"
        else
          echo "‚ùå community.general collection missing"
          exit 1
        fi
        
        # Verificar ansible.posix
        if echo "$COLLECTIONS" | grep -q "ansible.posix"; then
          echo "‚úÖ ansible.posix collection installed"
        else
          echo "‚ùå ansible.posix collection missing"
          exit 1
        fi
    
    - name: Test Scripts Functionality
      run: |
        echo "üîç Testing scripts functionality..."
        
        # Test health check script
        if docker compose exec -T ansible-control /usr/local/bin/health-check-control.sh; then
          echo "‚úÖ Health check script works"
        else
          echo "‚ùå Health check script failed"
          exit 1
        fi
        
        # Test SSH key generation
        if docker compose exec -T ansible-control /usr/local/bin/generate-ssh-keys.sh; then
          echo "‚úÖ SSH key generation script works"
        else
          echo "‚ùå SSH key generation script failed"
          exit 1
        fi
    
    - name: Test Ansible Configuration
      run: |
        echo "üîç Testing Ansible configuration..."
        
        # Verificar ansible.cfg
        if docker compose exec -T ansible-control test -f /ansible/ansible.cfg; then
          echo "‚úÖ ansible.cfg exists"
        else
          echo "‚ùå ansible.cfg missing"
          exit 1
        fi
        
        # Verificar configuraci√≥n de Ansible
        CONFIG_TEST=$(docker compose exec -T ansible-control ansible-config dump --only-changed)
        echo "Ansible configuration:"
        echo "$CONFIG_TEST"
    
    - name: Test Playbooks Syntax
      run: |
        echo "üîç Testing playbooks syntax..."
        
        # Verificar sintaxis de playbooks
        for playbook in ping.yml setup-base.yml setup-webservers.yml; do
          echo "Testing $playbook syntax..."
          if docker compose exec -T ansible-control ansible-playbook --syntax-check /ansible/playbooks/$playbook; then
            echo "‚úÖ $playbook syntax is valid"
          else
            echo "‚ùå $playbook syntax error"
            exit 1
          fi
        done
    
    - name: Test Directory Permissions
      run: |
        echo "üîç Testing directory permissions..."
        
        # Verificar permisos de /ansible
        ANSIBLE_PERMS=$(docker compose exec -T ansible-control ls -la /ansible)
        echo "Ansible directory permissions:"
        echo "$ANSIBLE_PERMS"
        
        # Verificar que ansible user es propietario
        if echo "$ANSIBLE_PERMS" | grep -q "ansible ansible"; then
          echo "‚úÖ Ansible directory has correct ownership"
        else
          echo "‚ùå Ansible directory ownership incorrect"
          exit 1
        fi
    
    - name: Cleanup Test Environment
      if: always()
      run: |
        echo "üßπ Cleaning up test environment..."
        docker compose down -v
        docker system prune -f

  # Job 4: Test de integraci√≥n b√°sica
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and Start Environment
      run: |
        echo "üèóÔ∏è Building and starting test environment..."
        docker compose build ansible-control
        docker compose up -d ansible-control
        sleep 30
    
    - name: Test Container Networking
      run: |
        echo "üîç Testing container networking..."
        
        # Verificar que el contenedor puede resolver DNS
        if docker compose exec -T ansible-control nslookup google.com; then
          echo "‚úÖ DNS resolution works"
        else
          echo "‚ùå DNS resolution failed"
          exit 1
        fi
        
        # Verificar conectividad externa
        if docker compose exec -T ansible-control ping -c 3 8.8.8.8; then
          echo "‚úÖ External connectivity works"
        else
          echo "‚ùå External connectivity failed"
          exit 1
        fi
    
    - name: Test Volume Mounts
      run: |
        echo "üîç Testing volume mounts..."
        
        # Crear archivo de prueba
        docker compose exec -T ansible-control touch /ansible/test-file.txt
        
        # Verificar que el archivo existe
        if docker compose exec -T ansible-control test -f /ansible/test-file.txt; then
          echo "‚úÖ Volume mount works"
        else
          echo "‚ùå Volume mount failed"
          exit 1
        fi
        
        # Limpiar archivo de prueba
        docker compose exec -T ansible-control rm /ansible/test-file.txt
    
    - name: Test SSH Configuration
      run: |
        echo "üîç Testing SSH configuration..."
        
        # Verificar servicio SSH
        if docker compose exec -T ansible-control systemctl is-active sshd; then
          echo "‚úÖ SSH service is active"
        else
          echo "‚ùå SSH service is not active"
          exit 1
        fi
        
        # Verificar directorio .ssh
        if docker compose exec -T ansible-control test -d /home/ansible/.ssh; then
          echo "‚úÖ SSH directory exists"
        else
          echo "‚ùå SSH directory missing"
          exit 1
        fi
    
    - name: Test Environment Variables
      run: |
        echo "üîç Testing environment variables..."
        
        # Verificar variables de entorno
        ENV_VARS=$(docker compose exec -T ansible-control env | grep ANSIBLE)
        echo "Ansible environment variables:"
        echo "$ENV_VARS"
        
        # Verificar variables espec√≠ficas
        if echo "$ENV_VARS" | grep -q "ANSIBLE_USER=ansible"; then
          echo "‚úÖ ANSIBLE_USER variable set correctly"
        else
          echo "‚ùå ANSIBLE_USER variable incorrect"
          exit 1
        fi
        
        if echo "$ENV_VARS" | grep -q "ANSIBLE_HOST_KEY_CHECKING=False"; then
          echo "‚úÖ ANSIBLE_HOST_KEY_CHECKING variable set correctly"
        else
          echo "‚ùå ANSIBLE_HOST_KEY_CHECKING variable incorrect"
          exit 1
        fi
    
    - name: Cleanup Integration Environment
      if: always()
      run: |
        echo "üßπ Cleaning up integration environment..."
        docker compose down -v
        docker system prune -f

  # Job 5: Reporte de resultados
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [validate-structure, security-analysis, build-and-test, integration-test]
    if: always()
    
    steps:
    - name: Generate Test Report
      run: |
        echo "üìä Phase 1 Test Results Summary"
        echo "================================"
        echo ""
        echo "‚úÖ Structure Validation: ${{ needs.validate-structure.result }}"
        echo "‚úÖ Security Analysis: ${{ needs.security-analysis.result }}"
        echo "‚úÖ Build and Test: ${{ needs.build-and-test.result }}"
        echo "‚úÖ Integration Tests: ${{ needs.integration-test.result }}"
        echo ""
        
        if [[ "${{ needs.validate-structure.result }}" == "success" && \
              "${{ needs.security-analysis.result }}" == "success" && \
              "${{ needs.build-and-test.result }}" == "success" && \
              "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "üéâ ALL PHASE 1 TESTS PASSED!"
          echo "The Ansible Control Node is ready for Phase 2"
        else
          echo "‚ùå SOME TESTS FAILED!"
          echo "Please review the failed jobs before proceeding"
          exit 1
        fi
