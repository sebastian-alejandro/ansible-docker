name: Phase 1 - Performance Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ansible-control/**'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ansible-control/**'
      - 'docker-compose.yml'
  workflow_dispatch:
    inputs:
      stress_duration:
        description: 'Stress test duration in minutes'
        required: false
        default: '5'
        type: choice
        options:
        - '2'
        - '5'
        - '10'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  container-performance:
    name: Container Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Container
      run: |
        echo "üèóÔ∏è Building Ansible Control Node for performance testing..."
        docker compose build ansible-control
    
    - name: Test Container Boot Time
      run: |
        echo "‚è±Ô∏è Testing container boot time..."
        
        # Medir tiempo de arranque
        start_time=$(date +%s)
        docker compose up -d ansible-control
        
        # Esperar hasta que el contenedor est√© listo
        echo "Waiting for container to be ready..."
        max_wait=120  # 2 minutos m√°ximo
        wait_time=0
        
        while [ $wait_time -lt $max_wait ]; do
          if docker compose exec -T ansible-control /usr/local/bin/health-check-control.sh > /dev/null 2>&1; then
            break
          fi
          sleep 2
          wait_time=$((wait_time + 2))
        done
        
        end_time=$(date +%s)
        boot_time=$((end_time - start_time))
        
        echo "üöÄ Container boot time: ${boot_time} seconds"
        
        # Verificar que el tiempo de arranque sea razonable (menos de 60 segundos)
        if [ $boot_time -gt 60 ]; then
          echo "‚ùå Container boot time too slow: ${boot_time}s (should be < 60s)"
          exit 1
        else
          echo "‚úÖ Container boot time acceptable: ${boot_time}s"
        fi
    
    - name: Test Memory Usage
      run: |
        echo "üß† Testing memory usage..."
        
        # Obtener estad√≠sticas del contenedor
        STATS=$(docker stats ansible-control --no-stream --format "table {{.MemUsage}}")
        echo "Memory usage: $STATS"
        
        # Extraer uso de memoria en MB
        MEM_USAGE=$(docker stats ansible-control --no-stream --format "{{.MemUsage}}" | cut -d' ' -f1 | cut -d'M' -f1)
        
        echo "Current memory usage: ${MEM_USAGE}MB"
        
        # Verificar que el uso de memoria sea razonable (menos de 500MB en idle)
        if [ "${MEM_USAGE%.*}" -gt 500 ]; then
          echo "‚ùå Memory usage too high: ${MEM_USAGE}MB (should be < 500MB)"
          exit 1
        else
          echo "‚úÖ Memory usage acceptable: ${MEM_USAGE}MB"
        fi
    
    - name: Test CPU Usage
      run: |
        echo "üñ•Ô∏è Testing CPU usage..."
        
        # Monitorear CPU por 30 segundos
        echo "Monitoring CPU usage for 30 seconds..."
        
        for i in {1..6}; do
          CPU_USAGE=$(docker stats ansible-control --no-stream --format "{{.CPUPerc}}" | cut -d'%' -f1)
          echo "CPU usage sample $i: ${CPU_USAGE}%"
          sleep 5
        done
        
        # La CPU en idle deber√≠a ser baja
        echo "‚úÖ CPU monitoring completed"
    
    - name: Test Ansible Performance
      run: |
        echo "üé≠ Testing Ansible performance..."
        
        # Medir tiempo de ejecuci√≥n de comandos Ansible b√°sicos
        echo "Testing ansible --version performance..."
        start_time=$(date +%s%N)
        docker compose exec -T ansible-control ansible --version > /dev/null
        end_time=$(date +%s%N)
        ansible_time=$(((end_time - start_time) / 1000000))  # Convert to milliseconds
        
        echo "Ansible --version execution time: ${ansible_time}ms"
        
        # Verificar que los comandos b√°sicos sean r√°pidos (menos de 5 segundos)
        if [ $ansible_time -gt 5000 ]; then
          echo "‚ùå Ansible command too slow: ${ansible_time}ms"
          exit 1
        else
          echo "‚úÖ Ansible command performance acceptable: ${ansible_time}ms"
        fi
        
        # Test de sintaxis de playbooks
        echo "Testing playbook syntax check performance..."
        start_time=$(date +%s%N)
        docker compose exec -T ansible-control ansible-playbook --syntax-check /ansible/playbooks/ping.yml > /dev/null
        end_time=$(date +%s%N)
        syntax_time=$(((end_time - start_time) / 1000000))
        
        echo "Playbook syntax check time: ${syntax_time}ms"
        
        if [ $syntax_time -gt 10000 ]; then
          echo "‚ùå Playbook syntax check too slow: ${syntax_time}ms"
          exit 1
        else
          echo "‚úÖ Playbook syntax check performance acceptable: ${syntax_time}ms"
        fi
    
    - name: Test Script Performance
      run: |
        echo "üìú Testing script performance..."
        
        # Test health check script performance
        echo "Testing health check script performance..."
        start_time=$(date +%s%N)
        docker compose exec -T ansible-control /usr/local/bin/health-check-control.sh > /dev/null
        end_time=$(date +%s%N)
        health_time=$(((end_time - start_time) / 1000000))
        
        echo "Health check execution time: ${health_time}ms"
        
        if [ $health_time -gt 3000 ]; then
          echo "‚ùå Health check too slow: ${health_time}ms"
          exit 1
        else
          echo "‚úÖ Health check performance acceptable: ${health_time}ms"
        fi
        
        # Test SSH key generation performance
        echo "Testing SSH key generation performance..."
        start_time=$(date +%s%N)
        docker compose exec -T ansible-control /usr/local/bin/generate-ssh-keys.sh > /dev/null 2>&1
        end_time=$(date +%s%N)
        ssh_time=$(((end_time - start_time) / 1000000))
        
        echo "SSH key generation time: ${ssh_time}ms"
        
        if [ $ssh_time -gt 15000 ]; then
          echo "‚ùå SSH key generation too slow: ${ssh_time}ms"
          exit 1
        else
          echo "‚úÖ SSH key generation performance acceptable: ${ssh_time}ms"
        fi
    
    - name: Stress Test (Optional)
      if: github.event.inputs.stress_duration != ''
      run: |
        echo "üí™ Running stress test for ${{ github.event.inputs.stress_duration }} minutes..."
        
        DURATION=${{ github.event.inputs.stress_duration }}
        END_TIME=$(($(date +%s) + (DURATION * 60)))
        
        echo "Stress testing until $(date -d @$END_TIME)"
        
        # Ejecutar comandos repetitivos para probar la estabilidad
        while [ $(date +%s) -lt $END_TIME ]; do
          # Test Ansible command
          docker compose exec -T ansible-control ansible --version > /dev/null 2>&1
          
          # Test health check
          docker compose exec -T ansible-control /usr/local/bin/health-check-control.sh > /dev/null 2>&1
          
          # Test file operations
          docker compose exec -T ansible-control ls -la /ansible > /dev/null 2>&1
          
          # Breve pausa
          sleep 1
        done
        
        echo "‚úÖ Stress test completed successfully"
    
    - name: Container Resource Limits Test
      run: |
        echo "üìä Testing container with resource limits..."
        
        # Parar el contenedor actual
        docker compose down
        
        # Crear docker-compose override para limitar recursos
        cat > docker-compose.override.yml << EOF
        version: '3.8'
        services:
          ansible-control:
            deploy:
              resources:
                limits:
                  memory: 256M
                  cpus: '0.5'
        EOF
        
        # Reiniciar con l√≠mites de recursos
        docker compose up -d ansible-control
        sleep 30
        
        # Verificar que sigue funcionando con recursos limitados
        if docker compose exec -T ansible-control /usr/local/bin/health-check-control.sh; then
          echo "‚úÖ Container works with resource limits"
        else
          echo "‚ùå Container fails with resource limits"
          exit 1
        fi
        
        # Limpiar override
        rm -f docker-compose.override.yml
    
    - name: Generate Performance Report
      if: always()
      run: |
        echo "üìà Performance Test Results" > performance-report.md
        echo "=========================" >> performance-report.md
        echo "" >> performance-report.md
        echo "**Test Date:** $(date)" >> performance-report.md
        echo "**Container:** ansible-control" >> performance-report.md
        echo "" >> performance-report.md
        echo "### Test Results Summary" >> performance-report.md
        echo "- ‚úÖ Boot time test" >> performance-report.md
        echo "- ‚úÖ Memory usage test" >> performance-report.md
        echo "- ‚úÖ CPU usage test" >> performance-report.md
        echo "- ‚úÖ Ansible performance test" >> performance-report.md
        echo "- ‚úÖ Script performance test" >> performance-report.md
        echo "- ‚úÖ Resource limits test" >> performance-report.md
        echo "" >> performance-report.md
        echo "### Recommendations" >> performance-report.md
        echo "- Monitor memory usage in production" >> performance-report.md
        echo "- Consider container resource limits" >> performance-report.md
        echo "- Regular performance monitoring recommended" >> performance-report.md
    
    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: performance-report.md
        retention-days: 30
    
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up performance test environment..."
        docker compose down -v
        docker system prune -f
